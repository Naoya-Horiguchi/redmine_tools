#!/bin/bash
#
# Usage
#   redmine show [options] <ticket_id>
#
# Description
#
# Options
#   -j|--journal  display notes
#   -h            show this message
#

# TODO: support local ticket

show_help() {
	sed -n 2,$[$BASH_LINENO-4]p $BASH_SOURCE | grep "^#" | sed 's/^#/ /'
}

SHOW_JOURNALS=

. $THISDIR/color.sh

while [[ $# -gt 0 ]] ; do
	key="$1"
	case $key in
		-j|--journal)
			SHOW_JOURNALS=true
			shift
			;;
		-t|--tree)
			SHOW_TREE=true
			shift
			;;
		-h)
			show_help
			exit 0
			;;
		*)
			break
			;;
	esac
done

ISSUEID=$1

if ! check_ticket_id_format $ISSUEID ; then
	echo "invalid issueid format" >&2
	exit 1
fi

if [[ "$ISSUEID" =~ ^L ]] ; then
	cat $TMPD/$ISSUEID/draft.md
	exit
fi

update_local_cache_task $ISSUEID || exit 1
! check_issue_exist $ISSUEID && echo "issue $ISSUEID not found" && exit 1

tmpfile=$TMPDIR/tmp.show.txt
__curl "/issues.json" $TMPDIR/tmp.show "&issue_id=$ISSUEID&include=relations&status_id=*"
convert_to_draft_from_json $ISSUEID $TMPDIR/tmp.show $TMPDIR/tmp.show.txt

. $THISDIR/tree.sh
DATA=$RM_CONFIG/issues.json

if [ "$SHOW_JOURNALS" ] ; then
	show_ticket_journal $ISSUEID
	cat $TMPDIR/$ISSUEID/abcd | less -R
elif [ "$SHOW_TREE" ] ; then
	PROJECT=
	show_ticket_subtree $ISSUEID > $TMPDIR/out

	ifs="$IFS"
	IFS=$'\n'
	for line in $(cat $TMPDIR/out) ; do
		[[ "$line" =~ ^PJ ]] && continue
		tid=$(echo $line | awk '{print $1}')
		count=$(echo $line | perl -pe 's/^( *).*?$/\1/' | wc -c)
		show_ticket_tree $tid $[count / 2] >> $TMPDIR/index.md
	done
	IFS="$ifs"
	cat $TMPDIR/index.md | less -R
else
	# TODO: use cat if the standard output is connected to pipe
	less $tmpfile
fi
