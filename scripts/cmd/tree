#!/bin/bash
#
# Usage
#   redmine tree [options] [pjspec ...]
#
# Description
#   Print project tree to standard output. If you give project IDs as parameters,
#   the output only includes project trees under specified projects are printed.
#   If you give no parameter, all project trees are printed.
#
# Options
#   -e            edit project tree
#   -c            show all closed tickets
#   -C            hide all closed tickets
#   -p            show project tree
#   -t ticket_id  show subtree under the given ticket
#   -s            show subprojects
#   -h            show this message
#
# TODO:
#  - project summary tree (# of tasks for each status, tracker)
#  - relationship between different projects seems to be broken

show_help() {
	sed -n 2,$[$BASH_LINENO-4]p $BASH_SOURCE | grep "^#" | sed 's/^#/ /'
}

PROJECT=all
EDIT=
PJTREE_ONLY=
SHOW_SUBPROJECT=
TICKET_SUBTREE=
COLOR=true
while [[ $# -gt 0 ]] ; do
	key="$1"
	case $key in
		-e)
			EDIT=true
			COLOR=false
			shift 1
			;;
		-c)
			RM_SHOW_CLOSED=true
			shift 1
			;;
		-C)
			RM_SHOW_CLOSED=false
			shift 1
			;;
		-p)
			PJTREE_ONLY=true
			SHOW_SUBPROJECT=true
			shift 1
			;;
		-s)
			SHOW_SUBPROJECT=true
			shift 1
			;;
		-t)
			TICKET_SUBTREE=$2
			shift 2
			;;
		-h)
			show_help
			exit 0
			;;
		*)
			break
			# echo "invalid option $key"
			;;
	esac
done

if [ "$SHOW_SUBPROJECT" ] && [ "$TICKET_SUBTREE" ] ; then
	echo "Don't specify -s and -t together." >&2
	exit 1
fi

# only colors for terminal output
[ ! "$EDIT" ] && [ -t 1 ] && . $THISDIR/color.sh
. $THISDIR/tree.sh
if [ "$#" -gt 0 ] ; then
	PROJECT="$@"
else
	SHOW_SUBPROJECT=true
fi

DATA=$RM_CONFIG/issues.json


# DONE
# - 既存の issue の状態、トラッカー、関連、サブジェクトの更新
# - issue の更新
#   - 親子関係は、直接変更しなかった issue も影響を受けることがあり、複雑である。
#   - 事前に parent tree map を保持しておいて、draft 編集後にどのように構造が変わったかチェックする。
#   - project の変更、これも親プロジェクトの変更とリンクする話
#   - issue の削除
# - 新しい issue の追加
#
# TODO
# - プロジェクト間の階層構造の更新
# - 不正なフォーマットを正しく無視する
edit_tree() {
	local draft="$1"
	local newline=
	local oldline=

	cp $TMPDIR/out $TMPDIR/out.copy
	$EDITOR $draft
	replace_new_ticket_line_with_number_id $draft
	diff -u $TMPDIR/out.copy $TMPDIR/out > $TMPDIR/out.diff
	bash $THISDIR/project_tree_parse.sh $TMPDIR/out.copy | sort -k1n > $TMPDIR/pjtree.before || exit 1
	bash $THISDIR/project_tree_parse.sh $TMPDIR/out | sort -k1n > $TMPDIR/pjtree.after || exit 1
	# this $TMPDIR/pjtree.diff might be updated for newly created tickets
	diff -u0 $TMPDIR/pjtree.before $TMPDIR/pjtree.after > $TMPDIR/pjtree.diff
	# cat $TMPDIR/pjtree.diff

	local changed_ids="$(get_list_of_changed_tickets $TMPDIR/out.diff)"
	for id in $changed_ids ; do
		newline="$(grep "^+ *$id " $TMPDIR/out.diff)"
		oldline="$(grep "^- *$id " $TMPDIR/out.diff)"
		if [ "$newline" ] && [ "$oldline" ] ; then
			echo update_ticket $id
			update_pjtree_ticket "$id" "$newline" "$oldline"
		elif [ "$newline" ] ; then
			echo create_ticket "$id"
			# TODO: show newly create issue id in standard output
			create_pjtree_ticket "$id" "$newline"
		elif [ "$oldline" ] ; then
			echo "Removing ticket from pjtree is a little too dangerous, so don't do it. If you really need, use remove command."
			# Maybe we need be more careful not to unexpectedly remove ticket
			# remove_pjtree_ticket "$id"
		fi
	done

	# if no error
	update_local_cache
}

update_local_cache > /dev/null 2>&1 || exit 1

jq -r ".issues[] | [.parent.id, .project.id, .id, .tracker.name, .status.name, .done_ratio, .subject, .closed_on] | @csv" ${RM_CONFIG}/issues.json | sort -k1n > $TMPDIR/issues
jq -r ".projects[] | [.parent.id, .id, .name] | @csv" ${RM_CONFIG}/projects.json | sort -k1n > $TMPDIR/projects

TICKETS=$TICKET_SUBTREE PROJECTS="$(pjspec_to_pjid $PROJECT | tr ' ' ',')" COLOR=$COLOR SHOWPJONLY=$PJTREE_ONLY SHOWCLOSED=$RM_SHOW_CLOSED SHOWSUBPROJECT=${SHOW_SUBPROJECT} python3 $THISDIR/tree.py $TMPDIR/issues $TMPDIR/projects $RM_CONFIG/trackers.json > $TMPDIR/out

if [ "$EDIT" ] ; then
	edit_tree $TMPDIR/out
else
	cat $TMPDIR/out | expand | less -R
fi
