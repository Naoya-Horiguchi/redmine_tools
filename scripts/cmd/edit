#!/bin/bash
#
# Usage
#   redmine edit [options] <ticket_id>
#
# Description
#   edit a specified ticket.
#
#   With -f option, edit a specified ticket by passing draft file,
#   which are generated by `show` subcommand. Note that draft file
#   shouldn't include notes, so switch off RM_SHOW_JOURNALS
#   (to set blank or any string other than "true".)
#
# Options
#   -r <note_id>  quote reply to the specified note
#   -f <draft>    update ticket with given draft file
#   -h            show this message
#

show_help() {
	sed -n 2,$[$BASH_LINENO-4]p $BASH_SOURCE | grep "^#" | sed 's/^#/ /'
}

REPLYNOTE=
DRAFT=

while [[ $# -gt 0 ]] ; do
	key="$1"
	case $key in
		-r)
			REPLYNOTE="$2"
			shift 2
			;;
		-f)
			DRAFT="$2"
			shift 2
			;;
		-h)
			show_help
			exit 0
			;;
		*)
			break
			;;
	esac
done

. $THISDIR/tree.sh

if [ "$DRAFT" ] ; then
	if [ ! -s "$DRAFT" ] ; then
		ehco "no DRAFT file found" >&2
		exit 1
	fi

	ISSUEID="$(grep -i ^#\+issue: $DRAFT | sed 's|^#+issue: *||i')"

	if [ ! "$ISSUEID" ] ; then
		echo "No issue ID in a given file" >&2
		exit 1
	fi

	echo "Try to upload ticket with file $DRAFT for issue $ISSUEID"
	upload_ticket $DRAFT $ISSUEID $TMPDIR/tmp.upload.json
	if [ $? -eq 0 ] ; then
		# TODO: need to download forcibly when you update relationship
		# because timestamp might not be updated.
		( update_local_cache_task $ISSUEID ) &
		exit 0
	fi
	echo "update_issue failed, check draft.md and/or network connection."
	exit 1
else
	ISSUEID=$1

	if ! check_ticket_id_format $ISSUEID ; then
		echo "invalid issueid format" >&2
		exit 1
	fi

	if [[ "$ISSUEID" =~ ^L ]] ; then
		edit_local_ticket $ISSUEID
		exit 0
	fi

	update_local_cache_task $ISSUEID || exit 1
	! check_issue_exist $ISSUEID && echo "issue $ISSUEID not found" && exit 1

	[ "$STY" ] && printf $'\033k'RM#$ISSUEID\(proj\)$'\033'\\
	update_issue3 $ISSUEID
fi
