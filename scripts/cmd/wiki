#!/bin/bash
#
# Usage
#   redmine wiki -l
#   redmine wiki -s <wikipageid>
#   redmine wiki [-u file] <wikipageid>
#
# Description
#   Edit and update a given wiki page with your favorite editor.
#   Wiki page IDs are available by "show list" option (-l),
#   that are represented by "<project ID>-<index>"
#
# Options
#   -l            list wiki pages under the project
#   -s            show wiki page with change history
#   -u file       upload file
#   -h            show this message
#

show_help() {
	sed -n 2,$[$BASH_LINENO-4]p $BASH_SOURCE | grep "^#" | sed 's/^#/ /'
}

LIST=
SHOW=
UPLOADFILE=
while [[ $# -gt 0 ]] ; do
	key="$1"
	case $key in
		-l)
			LIST=true
			shift 1
			;;
		-s)
			SHOW=true
			shift 1
			;;
		-u)
			UPLOADFILE="$2"
			shift 2
			;;
		-h)
			show_help
			exit 0
			;;
		*)
			# echo "invalid option $key"
			break
			;;
	esac
done

pjid_to_pjidentifier() {
	jq -r ".projects[] | select(.id == $1) | .identifier" $RM_CONFIG/projects.json
}

update_wiki_page() {
	local pjidentifier="$1"
	local wikipage="$2"
	local extension=

	if [ "$RM_FORMAT" == markdown ] ; then
		extension=.md
	fi

	curl -sk $RM_BASEURL/projects/${pjidentifier}/wiki/${wikipage}.json?key=${RM_KEY} > $TMPDIR/wiki.json || exit 1
	jq -r .wiki_page.text $TMPDIR/wiki.json | sed "s/\r//g" > $TMPDIR/wiki.text
	jq -r .wiki_page.text $TMPDIR/wiki.json | sed "s/\r//g" > $TMPDIR/wiki.text.updated${extension}
	jq -r .wiki_page.updated_on $TMPDIR/wiki.json > $TMPDIR/wiki.updated_on
	while true ; do
		$EDITOR $TMPDIR/wiki.text.updated${extension}
		diff -u $TMPDIR/wiki.text $TMPDIR/wiki.text.updated${extension} > $TMPDIR/wiki.text.diff
		if [ -s "$TMPDIR/wiki.text.diff" ] ; then
			cat "$TMPDIR/wiki.text.diff"
			# ask
			echo
			echo "You really upload this change? (y: yes, n: no, e: edit again)"
			read input
			if [ "$input" == y ] || [ "$input" == Y ] ; then
				curl -sk $RM_BASEURL/projects/${pjidentifier}/wiki/${wikipage}.json?key=${RM_KEY} > $TMPDIR/wiki.conflictcheck.json || exit 1
				jq -r .wiki_page.updated_on $TMPDIR/wiki.conflictcheck.json > $TMPDIR/wiki.updated_on.conflictcheck
				if diff -q $TMPDIR/wiki.updated_on $TMPDIR/wiki.updated_on.conflictcheck ; then
					echo "ok, upload now"
					
					uploadjson=$TMPDIR/wiki.upload.json
					echo "{\"wiki_page\": {}}" > $uploadjson
					json_add_text $uploadjson .wiki_page.text "$(cat $TMPDIR/wiki.text.updated${extension})" || return 1
					curl ${INSECURE:+-k} -s -H "Content-Type: application/json" -X PUT --data-binary "@${uploadjson}" -H "X-Redmine-API-Key: $RM_KEY" $RM_BASEURL/projects/${pjidentifier}/wiki/${wikipage}.json || return 1
				else
					echo "conflict detected, please try again with $TMPDIR/wiki.text.diff"
				fi
				break
			elif [ "$input" == n ] || [ "$input" == N ] ; then
				break
			else
				true # edit again
			fi
		else
			echo no update
			break
		fi
	done
}

for pjid in $(jq -r ".projects[] | .id" $RM_CONFIG/projects.json) ; do
	curl -sk $RM_BASEURL/projects/$pjid/wiki/index.json?key=${RM_KEY} | jq -r '.wiki_pages | to_entries | map([.key, .value.title])[] | @tsv' | sed "s/^/$pjid-/" >> $TMPDIR/wikilist.tsv
done

if [ "$LIST" ] ; then
	cat $TMPDIR/wikilist.tsv
else
	if [ "$1" ] ; then
		WIKIPAGEID=$1
		WIKIPAGENAME="$(grep -P "${WIKIPAGEID}\t" $TMPDIR/wikilist.tsv | cut -f2)"
		pjid="$(echo $WIKIPAGEID | cut -f1 -d'-')"
		if [ "$WIKIPAGENAME" ] ; then
			if [ "$SHOW" ] ; then
				curl -sk $RM_BASEURL/projects/${pjid}/wiki/${WIKIPAGENAME}.json?key=${RM_KEY} > $TMPDIR/wiki.json || exit 1
				versions="$(jq -r .wiki_page.version $TMPDIR/wiki.json)"
				update="$(jq -r .wiki_page.updated_on $TMPDIR/wiki.json)"
				text="$(jq -r .wiki_page.text $TMPDIR/wiki.json)"
				echo "#+Version: $versions"
				echo "#+Updated: $update"
				echo
				jq -r .wiki_page.text $TMPDIR/wiki.json
			else
				update_wiki_page "$pjid" "$WIKIPAGENAME"
			fi
		else
			echo "Failed to get wikiname for ID $WIKIPAGEID" >&2
			exit 1
		fi
	else
		show_help
	fi
fi
